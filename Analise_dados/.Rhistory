library(tidyverse)
library(readxl)
dados <- read_excel("dadosvacinacao.txt", skip = 2)
library(readxl)
dados <- read_excel("dados_vacinacao.xlsx", skip = 2)
colnames(dados)[1:2] <- c("Data_Extracao", "Cod_Mun_Ocorrencia")
dados_long <- dados %>%
pivot_longer(
cols = c(Data_Extracao, Cod_mun_Ocorrencia),
names_to = c("Metrica", "Mes_Ano"),
names_sep = "\\.",
values_to = "Valor"
)
# Carregar pacotes necessários
library(tidyverse)
library(readxl)
# 1. Ler o arquivo Excel
# Substitua "dados_vacinacao.xlsx" pelo nome correto do seu arquivo
dados <- read_excel("dados_vacinacao.xlsx", skip = 2)
# 2. Renomear as colunas (ajustar nomes para facilitar a manipulação)
colnames(dados)[1:2] <- c("Data_Extracao", "Cod_Mun_Ocorrencia")
# 3. Transformar os dados de formato largo para formato longo (pivot_longer)
dados_long <- dados %>%
pivot_longer(
cols = -c(Data_Extracao, Cod_Mun_Ocorrencia), # Manter colunas fixas
names_to = c("Metrica", "Mes_Ano"),          # Nomear colunas geradas
names_sep = "\\.",                          # Separador (ajustar caso necessário)
values_to = "Valor"
)
# Verificar os nomes das colunas
colnames(dados)
dados <- read_excel("C:\Users\Vitória Alexandria\Documents\Analise_Dados\vacinacao", skip = 2)
dados <- read_excel("C:/Users/Vitória Alexandria/Documents/Analise_Dados/vacinacao.xlsx", skip = 2)
dados <- read_excel("C:\\Users\\Vitória Alexandria\\Documents\\Analise_Dados\\vacinacao.xlsx", skip = 2)
dados <- read_excel(file.choose("dados_vacinacao.xlsx"), skip = 2)
dados <- read_excel(file.choose("dados_vacinacao.xlsx"), skip = 2)
colnames(dados)
dados <- read_excel(file.choose("dados_vacinacao.xlsx"), skip = 2)
dados <- read.csv("C:/Users/Vitória Alexandria/Documents/Analise_Dados/vacinacao.csv", sep = ";", header = TRUE)
# Carregar pacotes necessários
library(tidyverse)
library(readxl)
# 1. Ler o arquivo Excel
# Substitua "dados_vacinacao.xlsx" pelo nome correto do seu arquivo
dados <- read_excel("dados_vacinacao.xlsx", skip = 2)
# 2. Renomear as colunas (ajustar nomes para facilitar a manipulação)
colnames(dados)[1:2] <- c("Data_Extracao", "Cod_Mun_Ocorrencia")
# 3. Transformar os dados de formato largo para formato longo (pivot_longer)
dados_long <- dados %>%
pivot_longer(
cols = -c(Data_Extracao, Cod_Mun_Ocorrencia), # Manter colunas fixas
names_to = c("Metrica", "Mes_Ano"),          # Nomear colunas geradas
names_sep = "\\.",                          # Separador (ajustar caso necessário)
values_to = "Valor"
)
# Carregar pacotes necessários
library(tidyverse)
library(readxl)
# 1. Ler o arquivo Excel
# Substitua "dados_vacinacao.xlsx" pelo nome correto do seu arquivo
dados <- read_excel("dados_vacinacao.xlsx", skip = 2)
# 2. Renomear as colunas (ajustar nomes para facilitar a manipulação)
colnames(dados)[1:2] <- c("Data_Extracao", "Cod_Mun_Ocorrencia")
# 3. Transformar os dados de formato largo para formato longo (pivot_longer)
dados_long <- dados %>%
pivot_longer(
cols = -c(Data_Extracao, Cod_Mun_Ocorrencia), # Manter colunas fixas
names_to = c("Metrica", "Mes_Ano"),          # Nomear colunas geradas
names_sep = "\\.",                          # Separador (ajustar caso necessário)
values_to = "Valor"
)
View(dados)
# Instalar pacotes necessários (se ainda não instalados)
if (!require("tidyverse")) install.packages("tidyverse")
# Carregar pacotes
library(tidyverse)
# Passo 1: Importar os dados do Excel
# Substitua "caminho_do_arquivo.x" pelo caminho correto do seu arquivo
library(readxl)
dados <- read_excel("dados_vacinacao.xlsx", skip = 2)  # pula as duas primeiras linhas de cabeçalho
# Passo 2: Renomear as colunas para simplificar
colnames(dados) <- c("Data_Extracao", "Cod_Mun_Ocorrencia",
"Cobertura_Vacinal_jan24", "Doses_Aplicadas_jan24", "Populacao_jan24",
"Cobertura_Vacinal_fev24", "Doses_Aplicadas_fev24", "Populacao_fev24",
"Cobertura_Vacinal_mar24", "Doses_Aplicadas_mar24", "Populacao_mar24",
"Cobertura_Vacinal_abr24", "Doses_Aplicadas_abr24", "Populacao_abr24",
"Cobertura_Vacinal_mai24", "Doses_Aplicadas_mai24", "Populacao_mai24",
"Cobertura_Vacinal_jun24", "Doses_Aplicadas_jun24", "Populacao_jun24",
"Cobertura_Vacinal_jul24", "Doses_Aplicadas_jul24", "Populacao_jul24",
"Cobertura_Vacinal_ago24", "Doses_Aplicadas_ago24", "Populacao_ago24",
"Cobertura_Vacinal_set24", "Doses_Aplicadas_set24", "Populacao_set24",
"Cobertura_Vacinal_out24", "Doses_Aplicadas_out24", "Populacao_out24")
# Passo 3: Transformar os dados em formato tidy (organizado)
dados_tidy <- dados %>%
pivot_longer(
cols = -c(Data_Extracao, Cod_Mun_Ocorrencia),
names_to = c(".value", "Mes_Ano"),
names_sep = "_"
)
dados <- read_excel("dados_vacinacao.xlsx", skip = 2)
dados <- read_excel("C:/Users/Vitória Alexandria/Downloads/db8c4f69-7d33-49b3-b0b8-929a28897875.xlsx", skip = 2)
colnames(dados) <- c("Data_Extracao", "Cod_Mun_Ocorrencia",
"Cobertura_Vacinal_jan24", "Doses_Aplicadas_jan24", "Populacao_jan24",
"Cobertura_Vacinal_fev24", "Doses_Aplicadas_fev24", "Populacao_fev24",
"Cobertura_Vacinal_mar24", "Doses_Aplicadas_mar24", "Populacao_mar24",
"Cobertura_Vacinal_abr24", "Doses_Aplicadas_abr24", "Populacao_abr24",
"Cobertura_Vacinal_mai24", "Doses_Aplicadas_mai24", "Populacao_mai24",
"Cobertura_Vacinal_jun24", "Doses_Aplicadas_jun24", "Populacao_jun24",
"Cobertura_Vacinal_jul24", "Doses_Aplicadas_jul24", "Populacao_jul24",
"Cobertura_Vacinal_ago24", "Doses_Aplicadas_ago24", "Populacao_ago24",
"Cobertura_Vacinal_set24", "Doses_Aplicadas_set24", "Populacao_set24",
"Cobertura_Vacinal_out24", "Doses_Aplicadas_out24", "Populacao_out24")
# Passo 3: Transformar os dados em formato tidy (organizado)
dados_tidy <- dados %>%
pivot_longer(
cols = -c(Data_Extracao, Cod_Mun_Ocorrencia),
names_to = c(".value", "Mes_Ano"),
names_sep = "_"
)
# Passo 4: Ajustar os dados
dados_tidy <- dados_tidy %>%
mutate(
Data_Extracao = as.Date(Data_Extracao, format = "%d/%m/%Y"),  # Converter datas
Mes_Ano = case_when(
Mes_Ano == "jan24" ~ "2024-01",
Mes_Ano == "fev24" ~ "2024-02",
Mes_Ano == "mar24" ~ "2024-03",
Mes_Ano == "abr24" ~ "2024-04",
Mes_Ano == "mai24" ~ "2024-05",
Mes_Ano == "jun24" ~ "2024-06",
Mes_Ano == "jul24" ~ "2024-07",
Mes_Ano == "ago24" ~ "2024-08",
Mes_Ano == "set24" ~ "2024-09",
Mes_Ano == "out24" ~ "2024-10"
),
Cobertura_Vacinal = as.numeric(gsub(",", ".", Cobertura_Vacinal)),  # Substituir vírgulas por pontos
Doses_Aplicadas = as.numeric(Doses_Aplicadas),
Populacao = as.numeric(Populacao)
)
print(colnames(dados))
# Remover espaços extras dos nomes das colunas
colnames(dados) <- trimws(colnames(dados))
# Renomear as colunas para facilitar o uso
colnames(dados) <- c("Data_Extracao", "Cod_Mun_Ocorrencia",
"Cobertura_Vacinal_jan24", "Doses_Aplicadas_jan24", "Populacao_jan24",
"Cobertura_Vacinal_fev24", "Doses_Aplicadas_fev24", "Populacao_fev24",
"Cobertura_Vacinal_mar24", "Doses_Aplicadas_mar24", "Populacao_mar24",
"Cobertura_Vacinal_abr24", "Doses_Aplicadas_abr24", "Populacao_abr24",
"Cobertura_Vacinal_mai24", "Doses_Aplicadas_mai24", "Populacao_mai24",
"Cobertura_Vacinal_jun24", "Doses_Aplicadas_jun24", "Populacao_jun24",
"Cobertura_Vacinal_jul24", "Doses_Aplicadas_jul24", "Populacao_jul24",
"Cobertura_Vacinal_ago24", "Doses_Aplicadas_ago24", "Populacao_ago24",
"Cobertura_Vacinal_set24", "Doses_Aplicadas_set24", "Populacao_set24",
"Cobertura_Vacinal_out24", "Doses_Aplicadas_out24", "Populacao_out24")
# Passo 2: Transformar os dados em formato tidy (organizado)
dados_tidy <- dados %>%
pivot_longer(
cols = -c(Data_Extracao, Cod_Mun_Ocorrencia),
names_to = c(".value", "Mes_Ano"),
names_sep = "_"
)
# Passo 3: Ajustar os dados
dados_tidy <- dados_tidy %>%
mutate(
Data_Extracao = as.Date(Data_Extracao, format = "%d/%m/%Y"),  # Converter datas
Mes_Ano = case_when(
Mes_Ano == "jan24" ~ "2024-01",
Mes_Ano == "fev24" ~ "2024-02",
Mes_Ano == "mar24" ~ "2024-03",
Mes_Ano == "abr24" ~ "2024-04",
Mes_Ano == "mai24" ~ "2024-05",
Mes_Ano == "jun24" ~ "2024-06",
Mes_Ano == "jul24" ~ "2024-07",
Mes_Ano == "ago24" ~ "2024-08",
Mes_Ano == "set24" ~ "2024-09",
Mes_Ano == "out24" ~ "2024-10"
),
Cobertura_Vacinal = as.numeric(gsub(",", ".", Cobertura_Vacinal)),  # Substituir vírgulas por pontos
Doses_Aplicadas = as.numeric(Doses_Aplicadas),
Populacao = as.numeric(Populacao)
)
colnames(dados)
dados_tidy <- dados %>%
pivot_longer(
cols = starts_with("Cobertura_Vacinal") | starts_with("Doses_Aplicadas") | starts_with("Populacao"),
names_to = c(".value", "Mes_Ano"),
names_sep = "_"
)
# Converter Cobertura Vacinal para número, corrigindo formato decimal
dados_tidy <- dados_tidy %>%
mutate(Cobertura_Vacinal = as.numeric(gsub(",", ".", Cobertura_Vacinal)))
# Carregar pacotes necessários
library(readxl)
library(dplyr)
library(tidyr)
# Carregar os dados (ajuste o caminho conforme necessário)
dados <- read_excel("C:/Users/Vitória Alexandria/Downloads/db8c4f69-7d33-49b3-b0b8-929a28897875.xlsx", skip = 2)
# Transformar para formato longo corretamente
dados_tidy <- dados %>%
pivot_longer(
cols = -c(Data_Extracao, Cod_Mun_Ocorrencia),  # Mantemos essas colunas fixas
names_to = c("Variavel", "Mes_Ano"),
names_pattern = "(.+)_(\\w{3}\\d{2})"  # Divide no último underline encontrado
)
names(dados) <- trimws(names(dados))
names(dados) <- trimws(names(dados))
# Verificar os nomes das colunas
print(colnames(dados))
# Transformar para formato longo
dados_tidy <- dados %>%
pivot_longer(
cols = -c(Data_Extracao, Cod_Mun_Ocorrencia),  # Mantemos essas colunas fixas
names_to = c("Variavel", "Mes_Ano"),
names_pattern = "(.+)_(\\w{3}\\d{2})"  # Divide no último underline encontrado
)
names(dados) <- names(dados) %>%
str_replace_all(" ", "_") %>%     # Substitui espaços por _
str_replace_all("ç", "c") %>%     # Substitui ç por c
str_replace_all("ã", "a") %>%     # Substitui ã por a
str_replace_all("\\.\\.\\..*", "") # Remove números extras (exemplo: ...3)
# Verificar os nomes corrigidos das colunas
print(colnames(dados))
# Transformar para formato longo corretamente
dados_tidy <- dados %>%
pivot_longer(
cols = -c(Data_Extracao, Cod_Mun_Ocorrencia),  # Agora os nomes estão padronizados
names_to = c("Variavel", "Mes_Ano"),
names_pattern = "(.+)_([a-z]{3}\\d{2})"  # Divide no último underline encontrado
)
# Transformar para formato longo corretamente
dados_tidy <- dados %>%
pivot_longer(
cols = -c(Data_Extracao, Cod_Mun_Ocorrência),  # Nome atualizado
names_to = c("Variavel", "Mes_Ano"),
names_pattern = "(.+)_([a-z]{3}\\d{2})"  # Divide no último underline encontrado
)
# Gerar nomes únicos para colunas duplicadas
names(dados)[3:length(names(dados))] <- paste0(names(dados)[3:length(names(dados))], "_", rep(c("jan24", "fev24", "mar24", "abr24", "mai24", "jun24", "jul24", "ago24", "set24", "out24"), each=3))
# Verificar os novos nomes corrigidos
print(colnames(dados))
# Transformar para formato longo corretamente
dados_tidy <- dados %>%
pivot_longer(
cols = -c(Data_Extracao, Cod_Mun_Ocorrência),
names_to = c("Variavel", "Mes_Ano"),
names_pattern = "(.+)_(\\w{3}\\d{2})"
)
print(dados_tidy)
write_csv(dados_tidy, "dados_vacinacao_tidy.csv")
View(dados_tidy)
# Estatísticas descritivas das taxas de vacinação
summary(dados_tidy %>% select(Cobertura_Vacinal, Doses_Aplicadas, Populacao))
colnames(dados_tidy)
# Estatísticas descritivas das variáveis
dados_tidy %>%
group_by(Variavel) %>%
summarise(
Media = mean(value, na.rm = TRUE),
Mediana = median(value, na.rm = TRUE),
Minimo = min(value, na.rm = TRUE),
Maximo = max(value, na.rm = TRUE),
Desvio_Padrao = sd(value, na.rm = TRUE)
) %>%
print()
# Gráfico de evolução da Cobertura Vacinal ao longo do tempo
ggplot(dados_tidy %>% filter(Variavel == "Cobertura Vacinal"), aes(x = Mes_Ano, y = value, group = Cod_Mun_Ocorrência, color = as.factor(Cod_Mun_Ocorrência))) +
geom_line(size = 1, alpha = 0.7) +
labs(title = "Evolução da Cobertura Vacinal por Município",
x = "Mês/Ano",
y = "Cobertura Vacinal (%)",
color = "Município") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Gráfico de evolução da Cobertura Vacinal ao longo do tempo
ggplot(dados_tidy %>% filter(Variavel == "Cobertura Vacinal"), aes(x = Mes_Ano, y = value, group = Cod_Mun_Ocorrência, color = as.factor(Cod_Mun_Ocorrência))) +
geom_line(linewidth = 1, alpha = 0.7) +  # Alterado de 'size' para 'linewidth'
labs(title = "Evolução da Cobertura Vacinal por Município",
x = "Mês/Ano",
y = "Cobertura Vacinal (%)",
color = "Município") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Gráfico de evolução da Cobertura Vacinal ao longo do tempo
ggplot(dados_tidy %>% filter(Variavel == "Cobertura Vacinal"), aes(x = Mes_Ano, y = value, group = Cod_Mun_Ocorrência, color = as.factor(Cod_Mun_Ocorrência))) +
geom_line(aes(linewidth = 1), alpha = 0.7) +  # Agora usando 'linewidth' dentro de 'aes()' para evitar o aviso
labs(title = "Evolução da Cobertura Vacinal por Município",
x = "Mês/Ano",
y = "Cobertura Vacinal (%)",
color = "Município") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Garantir que 'Mes_Ano' seja tratado como fator
dados_tidy$Mes_Ano <- factor(dados_tidy$Mes_Ano, levels = unique(dados_tidy$Mes_Ano))
# Gráfico de evolução da Cobertura Vacinal ao longo do tempo
ggplot(dados_tidy %>% filter(Variavel == "Cobertura Vacinal"), aes(x = Mes_Ano, y = value, group = Cod_Mun_Ocorrência, color = as.factor(Cod_Mun_Ocorrência))) +
geom_line(aes(group = Cod_Mun_Ocorrência), linewidth = 1, alpha = 0.7) +  # Garantir que as linhas sejam desenhadas
labs(title = "Evolução da Cobertura Vacinal por Município",
x = "Mês/Ano",
y = "Cobertura Vacinal (%)",
color = "Município") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Gráfico de pontos para a evolução da Cobertura Vacinal
ggplot(dados_tidy %>% filter(Variavel == "Cobertura Vacinal"), aes(x = Mes_Ano, y = value, color = as.factor(Cod_Mun_Ocorrência))) +
geom_point(size = 3, alpha = 0.7) +  # Usando 'geom_point' para representar os dados como pontos
labs(title = "Cobertura Vacinal ao Longo do Tempo por Município",
x = "Mês/Ano",
y = "Cobertura Vacinal (%)",
color = "Município") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Gráfico de barras para a evolução da Cobertura Vacinal
ggplot(dados_tidy %>% filter(Variavel == "Cobertura Vacinal"), aes(x = Mes_Ano, y = value, fill = as.factor(Cod_Mun_Ocorrência))) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.7) +  # Usando barras
labs(title = "Cobertura Vacinal por Município",
x = "Mês/Ano",
y = "Cobertura Vacinal (%)",
fill = "Município") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Verificar estrutura dos dados
str(dados_tidy)
# Verificar se existem valores faltantes
sum(is.na(dados_tidy))
# Verificar alguns dados para as variáveis principais
head(dados_tidy$Mes_Ano)
head(dados_tidy$value)
# Gráfico simples de barras (sem complicação)
ggplot(dados_tidy, aes(x = Mes_Ano, y = value)) +
geom_bar(stat = "identity", fill = "skyblue", alpha = 0.7) +
labs(title = "Cobertura Vacinal ao Longo do Tempo",
x = "Mês/Ano",
y = "Cobertura Vacinal (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(dados_tidy, aes(x = Cobertura_Vacinal)) +
geom_histogram(bins = 20, fill = "blue", alpha = 0.7) +
labs(title = "Distribuição da Cobertura Vacinal",
x = "Cobertura Vacinal (%)",
y = "Frequência") +
theme_minimal()
# Histograma simples da Cobertura Vacinal
ggplot(dados_tidy %>% filter(Variavel == "Cobertura Vacinal"), aes(x = value)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Distribuição da Cobertura Vacinal",
x = "Cobertura Vacinal (%)",
y = "Frequência") +
theme_minimal()
# Verificar as primeiras linhas dos dados
head(dados_tidy)
# Verificar a quantidade de valores faltantes
sum(is.na(dados_tidy$value))
# Remover linhas com NA na coluna 'value'
dados_tidy <- dados_tidy %>% filter(!is.na(value))
# Gráfico de histograma da Cobertura Vacinal
ggplot(dados_tidy %>% filter(Variavel == "Cobertura Vacinal"), aes(x = value)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Distribuição da Cobertura Vacinal",
x = "Cobertura Vacinal (%)",
y = "Frequência") +
theme_minimal()
# Gráfico de barras para a Cobertura Vacinal por Mês/Ano
ggplot(dados_tidy %>% filter(Variavel == "Cobertura Vacinal"), aes(x = Mes_Ano, y = value, fill = "skyblue")) +
geom_bar(stat = "identity", alpha = 0.7) +
labs(title = "Cobertura Vacinal por Mês/Ano",
x = "Mês/Ano",
y = "Cobertura Vacinal (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Verificar valores únicos de 'Mes_Ano' e corrigir espaços
unique(dados_tidy$Mes_Ano)
# Remover espaços extras nos valores de Mes_Ano
dados_tidy$Mes_Ano <- trimws(dados_tidy$Mes_Ano)
# Verificar as primeiras linhas do dataframe
head(dados_tidy)
# Verificar a estrutura completa dos dados
str(dados_tidy)
# Verificar os nomes das colunas
colnames(dados_tidy)
# Verificar tipo das colunas
class(dados_tidy$value)
class(dados_tidy$Mes_Ano)
# Converter 'Mes_Ano' para fator (caso não esteja)
dados_tidy$Mes_Ano <- as.factor(dados_tidy$Mes_Ano)
# Verificar a quantidade de valores faltantes na coluna 'value'
sum(is.na(dados_tidy$value))
# Remover linhas com NA na coluna 'value'
dados_tidy <- dados_tidy %>% filter(!is.na(value))
# Histograma simples para a Cobertura Vacinal
ggplot(dados_tidy %>% filter(Variavel == "Cobertura Vacinal"), aes(x = value)) +
geom_histogram(fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Distribuição da Cobertura Vacinal",
x = "Cobertura Vacinal (%)",
y = "Frequência") +
theme_minimal()
# Gráfico de barras para Cobertura Vacinal por Mês/Ano
ggplot(dados_tidy %>% filter(Variavel == "Cobertura Vacinal"), aes(x = Mes_Ano, y = value)) +
geom_bar(stat = "identity", fill = "skyblue", alpha = 0.7) +
labs(title = "Cobertura Vacinal por Mês/Ano",
x = "Mês/Ano",
y = "Cobertura Vacinal (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(dados_tidy, aes(x = Populacao, y = Doses_Aplicadas)) +
geom_point(alpha = 0.6, color = "red") +
geom_smooth(method = "lm", se = FALSE, color = "black") +
labs(title = "Relação entre População e Doses Aplicadas",
x = "População",
y = "Doses Aplicadas") +
theme_minimal()
# Histograma simples para a Cobertura Vacinal
ggplot(dados_tidy %>% filter(Variavel == "Cobertura_Vacinal"), aes(x = value)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Distribuição da Cobertura Vacinal",
x = "Cobertura Vacinal (%)",
y = "Frequência") +
theme_minimal()
# Filtrar os dados de Doses Aplicadas e População
dados_correlacao <- dados_tidy %>%
filter(Variavel %in% c("Doses_Aplicadas", "Populacao"))
# Verificar os dados filtrados
head(dados_correlacao)
# Calcular a correlação entre Doses Aplicadas e População
correlacao <- dados_correlacao %>%
spread(Variavel, value) %>%
summarise(correlacao = cor(Doses_Aplicadas, Populacao))
# Exibir a correlação
print(correlacao)
# Gráfico de dispersão entre Doses Aplicadas e População
ggplot(dados_correlacao %>% spread(Variavel, value), aes(x = Populacao, y = Doses_Aplicadas)) +
geom_point(color = "blue", alpha = 0.7) +
labs(title = "Correlação entre Doses Aplicadas e População",
x = "População",
y = "Doses Aplicadas") +
theme_minimal()
# Carregar as bibliotecas necessárias
library(caret)  # Para dividir os dados e treinar modelos
save.image("~/Analise_Dados/vacinacao/.data.RData")
